des questions et des r√©pondes sur C : 
CHAPITRE 2
 Q01 : Que signifie GCC ?

GCC = GNU Compiler Collection. C‚Äôest un ensemble de compilateurs, principalement pour le langage **C**, mais aussi C++, Fortran, Ada, etc.
Q02 : Que signifie GNU ?

GNU = GNU's Not Unix. C‚Äôest un projet pour cr√©er un syst√®me libre, compatible Unix.
Q03 : C'est quoi le probl√®me avec GCC, au fait ?

Il n‚Äôy a pas vraiment de probl√®me majeur. C‚Äôest un compilateur tr√®s robuste, mais certains trouvent qu‚Äôil :
 Donne des messages d'erreur parfois peu clairs.
Est complexe √† configurer pour les d√©butants.
 Q04 : Comment GCC est-il bon pour trouver des erreurs ?
GCC :

 Analyse le code en d√©tail.
 Avertit des **erreurs de syntaxe, de types, d‚Äôoubli de `return`, etc.**
Peut d√©tecter des **probl√®mes de s√©curit√© potentiels** (avec des options comme `-Wall`, `-Wextra`).
 Q05 : Pourquoi C est-il si laconique ?

C a √©t√© con√ßu pour √™tre :

* **Rapide √† √©crire et √† compiler**
* Proche du **langage machine**
  Les symboles `{}`, `int`, etc., sont **courts par souci d‚Äôefficacit√©** et de simplicit√©.
 Q06 : exit(0) vs return 0 dans `main` ?

* **`return 0;`** : retourne 0 au syst√®me d'exploitation (indique succ√®s).
* **`exit(0);`** : fait la m√™me chose, mais en passant par la fonction `exit()` de la biblioth√®que.
  ‚û°Ô∏è **Fonctionnellement √©quivalents** dans `main`.
 Q07 : Que se passe-t-il si `main` atteint la fin sans `return` ?

En C99 (et versions plus r√©centes) :
üëâ **C‚Äôest comme si `return 0;` √©tait √©crit automatiquement.**
Q08 : Le compilateur supprime-t-il un commentaire ou le remplace-t-il ?

Les **commentaires sont supprim√©s** compl√®tement **avant** la compilation, pendant la phase de pr√©traitement.
 Q09 : Comment savoir si un commentaire n‚Äôest pas termin√© ?

Le compilateur affichera une **erreur de syntaxe** (ex: "unexpected end of file").

* Utilise un √©diteur qui **colorie le code**, √ßa aide √† rep√©rer les erreurs de commentaires.
 Q10 : Peut-on imbriquer des commentaires ?

Non ‚ùå
En C, les **commentaires `/* ... */` ne peuvent pas √™tre imbriqu√©s**.
‚û°Ô∏è Cela provoque une erreur.
 Q11 : D'o√π vient le nom du type `float` ?

**`float`** vient de *floating point*, qui d√©signe les **nombres √† virgule flottante** (comme 3.14).
 Q12 : Pourquoi ajouter `f` aux constantes flottantes ?

Sans `f`, un nombre comme `3.14` est trait√© comme un **double**.
`3.14f` dit explicitement : ‚Äúc‚Äôest un `float`‚Äù (plus l√©ger, moins pr√©cis).
CHAPITRE 3

Questions :
(a) Identifiez les directives et les instructions dans ce programme.
R√©ponse
les directives de programmes sont : 
#include <stdio.h>
les instructions de programme sont : 
printf("Parkinson's Law:\nWork expands so as to ");
printf("fill the time\n");
printf("available for its completion.\n");
return 0;

(b) Quelle est la sortie du programme ?
R√©ponse 
Parkinson's Law:
Work expands so as to fill the time
available for its completion.

Section 1.4
3. Condensez le programme dweight.c en rempla√ßant les affectations de height,
length, et width par des initialisations et (2) en supprimant la variable weight, en
calculant plut√¥t (volume + 165) / 166 dans le dernier printf.
R√©ponse 

#include <stdio.h>
int main() {
        float height = 1.75, length = 2.5, width = 1.2;
    printf("Weight: %.2f\n", (height * length * width + 165) / 166);
    return 0;
}
3. √âcrivez un programme qui d√©clare plusieurs variables int et float ‚Äî sans les
initialiser ‚Äî puis affiche leurs valeurs. Y a-t-il un sch√©ma dans les valeurs ? (Il n'y
en a g√©n√©ralement pas.)
R√©ponse 
#include <stdio.h>
int main() {
    int a, b, c;
    float x, y, z;
    printf("Valeur de a: %d\n", a);
    printf("Valeur de b: %d\n", b);
    printf("Valeur de c: %d\n", c);
    printf("Valeur de x: %f\n", x);
    printf("Valeur de y: %f\n", y);
    printf("Valeur de z: %f\n", z);
    return 0;
}
les valeurs ne sont pas sch√©matiser car chaqu'un prend la valeur qui exist d√®ja dans  m√©moire 

5. Lesquels des √©l√©ments suivants ne sont pas des identifiants C l√©gaux ?
(a) 100_bottles
(b) _100_bottles
(c) one__hundred__bottles
(d) bottles_by_the_hundred_
R√©ponse 
 100_bottles n'est pas un identifiant C l√©gal (car il commence par un chiffre).

6. Pourquoi n'est-il pas judicieux pour un identifiant de contenir plus d'un trait de
soulignement adjacent (comme dans current___balance, par exemple) ?

R√©ponse 

n'est-il pas judicieux pour un identifiant de contenir plus d'un trait de
soulignement adjacent car cela rendrait le code moins lisible, plus sujet √† erreurs et plus difficile √† maintenir.

7. Lequels des √©l√©ments suivants sont des mots-cl√©s en C ?
(a) for
(b) If
(c) main
(d) printf
(e) while
r√©ponse 
a : oui ,b :non car commence par majuscule  ,c :non c'est suelement fonction ,d : non c'est suelement fonction , e : oui 
 8. Combien de jetons y a-t-il dans l'instruction suivante ?
answer=(3*q-p*p)/3;
R√©ponse 
le nombre des jetons est 14 qui  sont :

answer ‚Äî Identifiant (nom de la variable)

= ‚Äî Op√©rateur d'assignation

( ‚Äî D√©limiteur (parenth√®se ouvrante)

3 ‚Äî Litt√©ral (valeur enti√®re)

* ‚Äî Op√©rateur de multiplication

q ‚Äî Identifiant (variable)

- ‚Äî Op√©rateur de soustraction

p ‚Äî Identifiant (variable)

* ‚Äî Op√©rateur de multiplication

p ‚Äî Identifiant (variable)

) ‚Äî D√©limiteur (parenth√®se fermante)

/ ‚Äî Op√©rateur de division

3 ‚Äî Litt√©ral (valeur enti√®re)

; ‚Äî D√©limiteur (point-virgule)

9 Ins√©rez des espaces entre les jetons de l'exercice 8 pour rendre l'instruction plus
facile √† lire.
R√©ponse :

answer = ( 3 * q - p * p ) / 3 ;

10. Dans le programme dweight.c (Section 1.4), quels espaces sont essentiels ?
R√©ponse 

Les espaces entre mots-cl√©s et identifiants sont essentiels.

Les espaces entre nombres, variables, op√©rateurs, sont optionnels mais recommand√©s pour la lisibilit√©.
c'est-√†-dire  :int main(void) : il faut un espace entre int et main

int height, length, width, volume, weight; : espace entre int et height

Les espaces dans les cha√Ænes de caract√®res (texte affich√©) sont essentiels pour l'affichage correct.

CHAPITRE 4 :

1 √âcrivez un programme qui utilise printf pour afficher l'image suivante √† l'√©cran
R√©ponse 
#include <stdio.h>

int main(void) {
    printf("1.           *\n");
    printf("2.          *\n");
    printf("3.        *\n");
    printf("4.  *    *\n");
    printf("5.   *  *\n");
    printf("6.    *\n");
    return 0;
}
2 √âcrivez un programme qui calcule le volume d'une sph√®re de 10 m√®tres de rayon,
en utilisant la formule v = 4/3œÄr3 . √âcrivez la fraction 4/3 comme 4.0f/3.0f.
(Essayez de l'√©crire comme 4/3. Que se passe-t-il ?)
Indice : C n'a pas d'op√©rateur d'exponentiation, vous devrez donc multiplier r par
lui-m√™me deux fois pour calculer r

R√©ponse
#include <stdio.h>
int main() { int i; 
    float r=10,Pi=3.14,volume;
    volume=(4/3)*Pi*(r*r*r));
    printf("le volume de sph√©re est %f",volume );
    return 0;
}

3.√âcrivez un programme qui calcule le volume d'une sph√®re de 10 m√®tres de rayon,
en utilisant la formule v = 4/3œÄr3 . √âcrivez la fraction 4/3 comme 4.0f/3.0f.
(Essayez de l'√©crire comme 4/3. Que se passe-t-il ?)
Indice : C n'a pas d'op√©rateur d'exponentiation, vous devrez donc multiplier r par
lui-m√™me deux fois pour calculer r
R√©ponse 
#include <stdio.h>
#include <math.h>
int main() { int i; 
    float r,Pi=3.14,volume;
    printf("veuillez saisir le rayon de sph√©re SVP\n");
    scanf("%f",&r);
    volume=(4/3)*Pi*pow(r,3));
    printf("le volume de sph√©re est %f",volume );
    return 0;
}
√âcrivez un programme qui demande √† l'utilisateur d'entrer un montant en dollars et
en cents, puis affiche le montant avec une taxe de 5% ajout√©e :
Entrez un montant : 100.00
Avec taxe ajout√©e : $105.00
R√©ponse 
#include <stdio.h>
int main(void) {
    float montant, montant_total;
    printf("Entrez le montant  SVP : ");
    scanf("%f", &montant);
    montant_total = montant * 1.05f;
    printf("Avec taxe ajout√©e : $%.2f\n", montant_total);
    return 0;
}

5. √âcrivez un programme qui demande √† l'utilisateur d'entrer une valeur pour x, puis
affiche la valeur du polyn√¥me suivant :
3x5+2x4
‚Äì5x3
‚Äìx
2+7x‚Äì6

Indice : C n'a pas d'op√©rateur d'exponentiation, vous devrez donc multiplier x par
lui-m√™me de mani√®re r√©p√©t√©e pour calculer les puissances de x. (Par exemple, x * x
* x est x au cube).
R√©ponse 
#include <stdio.h>
int main(void) {
    int x, valeur;
    printf("Entrez lvaleur de x SVP : ");
    scanf("%d", &x);
   valeur = 3*x*x*x*x*x+2*x*x*x*x-5*x*x*x-x*x+7*x-6;
    printf("la valeur de X est %d\n", valeur);
    return 0;
}
6. Modifiez le programme du projet 5 pour que le polyn√¥me soit √©valu√© en utilisant la
formule suivante :
((((3x+2)x‚Äì5)x‚Äì1)x+7)x‚Äì6
Notez que le programme modifi√© effectue moins de multiplications. Cette technique
d'√©valuation des polyn√¥mes est connue sous le nom de r√®gle de Horner.
R√©ponse
#include <stdio.h>
int main(void) {
    int x, valeur;
    printf("Entrez lvaleur de x SVP : ");
    scanf("%d", &x);
   valeur =((((3 * x + 2) * x - 5) * x - 1) * x + 7) * x - 6;
    printf("la valeur de X est %d\n", valeur);
    return 0;
}
7.√âcrivez un programme qui demande √† l'utilisateur d'entrer un montant en dollars
am√©ricains, puis montre comment payer ce montant en utilisant le plus petit nombre
de billets de 20$, 10$, 5$ et 1$ :

9

Entrez un montant en dollars : 93
Billets de 20$ : 4
Billets de 10$ : 1
Billets de 5$ : 0
Billets de 1$ : 3

R√©ponse 
#include <stdio.h>
int main(void) {
    int montant;
    int bi_20, bi_10, bi_5, bi_1;
    printf("Entrez un montant en dollars  SVP : ");
    scanf("%d", &montant);
    bi_20 = montant / 20;
    montant = montant % 20;
    bi_10 = montant / 10;
    montant = montant % 10;
    bi_5 = montant / 5;
    montant = montant % 5;
    bi_1 = montant;
    printf("Billets de 20$ : %d\n", bi_20);
    printf("Billets de 10$ : %d\n", bi_10);
    printf("Billets de 5$  : %d\n", bi_5);
    printf("Billets de 1$  : %d\n", bi_1);
    return 0;
}
8. √âcrivez un programme qui calcule le solde restant d'un pr√™t apr√®s le premier, le
deuxi√®me et le troisi√®me paiement mensuel :
Entrez le montant du pr√™t : 20000.00
Entrez le taux d'int√©r√™t : 6.0
Entrez le paiement mensuel : 386.66
Solde restant apr√®s le premier paiement : $19713.34
Solde restant apr√®s le deuxi√®me paiement : $19425.25
Solde restant apr√®s le troisi√®me paiement : $19135.71
Affichez chaque solde avec deux chiffres apr√®s la virgule.
Indice : Chaque mois, le solde est diminu√© du montant du paiement, mais augment√©
du solde multipli√© par le taux d'int√©r√™t mensuel. Pour trouver le taux d'int√©r√™t
mensuel, convertissez le taux d'int√©r√™t entr√© par l'utilisateur en un pourcentage et
divisez-le par 12.
R√©ponse 
#include <stdio.h>

int main(void) {
    float montant_pret, taux_annuel, paiement_mensuel, taux_mensuel;
    float solde;
    printf("Entrez le montant du pr√™t : ");
    scanf("%f", &montant_pret);
    printf("Entrez le taux d'int√©r√™t : ");
    scanf("%f", &taux_annuel);
    printf("Entrez le paiement mensuel : ");
    scanf("%f", &paiement_mensuel);
    taux_mensuel = (taux_annuel / 100.0f) / 12.0f;
    solde = montant_pret;
    solde = (solde - paiement_mensuel) + ((solde - paiement_mensuel) * taux_mensuel);
    printf("Solde restant apr√®s le premier paiement : $%.2f\n", solde);
    solde = (solde - paiement_mensuel) + ((solde - paiement_mensuel) * taux_mensuel);
    printf("Solde restant apr√®s le deuxi√®me paiement : $%.2f\n", solde);
    solde = (solde - paiement_mensuel) + ((solde - paiement_mensuel) * taux_mensuel);
    printf("Solde restant apr√®s le troisi√®me paiement : $%.2f\n", solde);

    return 0;
}
